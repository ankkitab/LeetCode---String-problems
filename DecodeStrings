DECODE STRING

Q. Given an encoded string, return it's decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].

Examples:

s = "3[a]2[bc]", return "aaabcbc".
s = "3[a2[c]]", return "accaccacc".
s = "2[abc]3[cd]ef", return "abcabccdcdcdef".
--------------------------------------------------------------------------------------------------------------------------

/* 
Solution approach : Used a stack. Keep pushing every character until you encounter a ']'. If a closing bracket is encountered popAndUpdate() is called which is basically popping the characters enclosed within that pair of brackets and decoding it and pushing the result back into the stack. 

*/


class Solution {
    public String decodeString(String s) {
        if (s==null || s.length() == 0) //base case
            return s; 
        
        Stack<Character> stack = new Stack<>(); 
        
        for (int i=0; i<s.length(); i++) { 
            char ch = s.charAt(i) ; 
            if (ch == ']') 
                popAndUpdate(stack) ; //don't push the "["
            else 
                stack.push(ch) ; 
        }
        
        String res = "" ; 
        while(!stack.isEmpty()) {
            char ch = stack.peek() ; 
            res = ch + res ; 
            stack.pop() ; 
        }
        
        return res; 
    }
    
    public void popAndUpdate(Stack<Character> stack) {
                                
        String str = "" ; 
        while (stack.peek()!='[') { //finding the enclosed string
            char ch = stack.peek(); 
            str = ch + str ; 
            stack.pop(); 
        }
        
        stack.pop() ; //popping "["
        
        //decoding process 
        String number = "";
        
        while (!stack.isEmpty() && stack.peek()>=48 && stack.peek()<= 57) {
            char ch = stack.peek();
            number = ch + number ; 
            stack.pop(); 
        }
        Integer val = Integer.parseInt(number); 
        
        String newStr = ""; 
        while (val>0) {
            newStr +=str ; 
            val--; 
        }
        
        //update
        for (int i=0; i<newStr.length(); i++) 
            stack.push(newStr.charAt(i));
    }
}
